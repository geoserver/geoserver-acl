# this is the embedded application configuration properties.
# Most common configurable properties are defined in values.yml, which is included by default (see spring.config.import below)
# Additionally, values.yml is copied to the Docker image container under /etc/geoserver/acl-service.yml and also
# imported by default as an optional property source
info:
  component: Access Control List service
  instance-id: ${spring.application.name}:${vcap.application.instance_id:${spring.application.instance_id:${spring.cloud.client.ip-address}}:${server.port}}
# acl-service main application configuration
# Do not edit this file. All configurable options are to be placed in the sibling values.yml,
# provided on a separate file and defined through spring.config.additional-location:file:<path to file>,
# or through environment variables or system properties.
server:
  port: 8080
  servlet.context-path: /acl
  # Let spring-boot's ForwardedHeaderFilter take care of reflecting the client-originated protocol and address in the HttpServletRequest  
  forward-headers-strategy: framework
  error:
    # one of never, always, on_trace_param (deprecated), on_param
    include-stacktrace: on-param
    include-binding-errors: always
    include-message: always
  compression:
    enabled: true
    mime-types:
    - application/json
    - application/x-jackson-smile
  tomcat:
    use-relative-redirects: true
    # Maximum number of connections that the server accepts and processes at any given time.
    # Once the limit has been reached, the operating system may still accept connections based on the "acceptCount" property.
    max-connections: ${tomcat.max.connections:8192}
    # Maximum queue length for incoming connection requests when all possible request processing threads are in use.
    accept-count: ${tomcat.accept.count:100}
    accesslog.enabled: ${tomcat.accesslog.enabled:false}
    mbeanregistry.enabled: ${tomcat.mbeanregistry.enabled:false}
    threads:
      # Minimum amount of worker threads.
      min-spare: ${tomcat.threads.min.spare:10}
      # Maximum amount of worker threads.
      max: ${tomcat.threads.max:64}


spring:
  config:
    import:
    - classpath:/springdoc.yml
    - classpath:/security.yml
    - classpath:/values.yml
    - optional:file:/etc/geoserver/acl-service.yml
  main:
    banner-mode: off
    web-application-type: servlet
  application:
    name: acl-service
  flyway:
    enabled: true
    # this will create the schema if doesn't exist
    # note the same property is used by geoserver.acl.jpa.properties.hibernate.default_schema
    default-schema: ${pg.schema}
  jackson:
    default-property-inclusion: non-empty
    serialization:
      indent-output: true
  autoconfigure:
    exclude:
      - org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration
      - org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration
      - org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration
      - org.springframework.boot.autoconfigure.jdbc.JndiDataSourceAutoConfiguration
      - org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration
  jpa:
    open-in-view: false
  rabbitmq:
    host: ${rabbitmq.host:rabbitmq}
    port: ${rabbitmq.port:5672}
    username: ${rabbitmq.user:guest}
    password: ${rabbitmq.password:guest}
    virtual-host: ${rabbitmq.vhost:}
  cloud:
    bus:
      enabled: ${geoserver.bus.enabled}
      id: ${info.instance-id}
      trace.enabled: false #switch on tracing of acks (default off).
    stream:
      bindings:
        # same bindings as for geoserver cloud
        springCloudBusOutput:
          destination: geoserver
        springCloudBusInput:
          destination: geoserver

management:
  server:
    port: 8081
  info:
    defaults.enabled: true
    env.enabled: true
    build.enabled: true
    git.enabled: true
    java.enabled: true
    os.enabled: true
  endpoint:
    httptrace:
      enabled: true
    health:
      probes:
        enabled: true
      show-components: when-authorized
      show-details: when-authorized
    caches.enabled: true
  endpoints:
    web.exposure.include: ['*']

jndi:
  datasources:
    acl:
      enabled: true
      wait-for-it: true
      wait-timeout: 15
      url: jdbc:postgresql://${pg.host}:${pg.port}/${pg.db}
      username: ${pg.username}
      password: ${pg.password}
      maximum-pool-size: ${pg.pool.max:50}
      minimum-idle: ${pg.pool.min:2}
      connection-timeout: ${pg.pool.connectionTimeout:3000}
      idle-timeout: ${pg.pool.idleTimeout:60000}

geoserver:
  bus.enabled: false
  acl:
    datasource:
      jndi-name: ${acl.db.jndiName:java:comp/env/jdbc/acl}
      url: ${acl.db.url:}
      username: ${acl.db.username:}
      password: ${acl.db.password:}
      hikari:
        minimum-idle: ${acl.db.hikari.minimumIdle:1}
        maximum-pool-size: ${acl.db.hikari.maximumPoolSize:20}
    jpa:
      show-sql: false
      open-in-view: false
      generate-ddl: false
      properties:
        hibernate:
          format_sql: true
          default_schema: ${pg.schema}
          hbm2ddl.auto: ${acl.db.hbm2ddl.auto:validate}
          dialect: ${acl.db.dialect:org.hibernate.spatial.dialect.postgis.PostgisPG10Dialect} 

---
spring.config.activate.on-profile: local
server.port: 9000

pg.host: localhost
pg.port: 6432
pg.database: acl
pg.schema: acl
pg.username: acl
pg.password: acls3cr3t

---
spring.config.activate.on-profile: dev

spring.flyway.enabled: false

jndi.datasources.acl.enabled: false
pg.schema: ''
acl.db.dialect: org.hibernate.spatial.dialect.h2geodb.GeoDBDialect
acl.db.hbm2ddl.auto: create
acl.security.headers.enabled: true

geoserver:
  acl:
    datasource:
      url: jdbc:h2:mem:geoserver-acl;DB_CLOSE_DELAY=-1
      jndi-name: ''
      hikari:
        minimum-idle: 1
        maximum-pool-size: 20

---
spring.config.activate.on-profile: ddl

spring:
  flyway:
    enabled: false
  main.web-application-type: none  
  autoconfigure:
    exclude:
      - org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration
      - org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration
      - org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration
      - org.springframework.boot.autoconfigure.jdbc.JndiDataSourceAutoConfiguration
      - org.geoserver.acl.autoconfigure.api.RulesApiAutoConfiguration
      - org.geoserver.acl.autoconfigure.security.AclServiceSecurityAutoConfiguration
      - org.geoserver.acl.autoconfigure.security.InternalSecurityConfiguration
      - org.geoserver.acl.autoconfigure.security.PreAuthenticationSecurityAutoConfiguration
      - org.geoserver.acl.autoconfigure.security.AuthenticationManagerAutoConfiguration
      - org.geoserver.acl.autoconfigure.springdoc.SpringDocAutoConfiguration

geoserver:
  acl:
    jpa:
      properties:
        '[javax.persistence.schema-generation.database.action]': none
        '[javax.persistence.schema-generation.scripts.action]': create
        '[javax.persistence.schema-generation.scripts.create-source]': metadata
        '[javax.persistence.schema-generation.scripts.create-target]': ${scripts.create-target:acl-create.sql}

logging:
  level:
    root: error
    org.geoserver.acl: info

---
spring.config.activate.on-profile: logging_debug_requests
logging:
  level:
    org.springframework.web.filter.CommonsRequestLoggingFilter: trace
