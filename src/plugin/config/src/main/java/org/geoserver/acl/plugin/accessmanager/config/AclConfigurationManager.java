/* (c) 2023 Open Source Geospatial Foundation - all rights reserved
 * This code is licensed under the GPL 2.0 license, available at the root
 * application directory.
 *
 * Original from GeoServer 2.24-SNAPSHOT under GPL 2.0 license
 */
package org.geoserver.acl.plugin.accessmanager.config;

import org.geoserver.acl.authorization.AuthorizationService;
import org.geoserver.acl.plugin.accessmanager.ACLResourceAccessManager;
import org.geoserver.acl.plugin.accessmanager.AccessManagerConfig;
import org.geoserver.acl.plugin.accessmanager.AccessManagerConfigProvider;
import org.geoserver.platform.resource.Resource;
import org.geotools.util.logging.Logging;

import java.io.BufferedWriter;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.net.URI;
import java.util.Objects;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * @author ETj (etj at geo-solutions.it) - Originally as part of GeoFence's GeoServer extension
 */
public class AclConfigurationManager implements AccessManagerConfigProvider {

    private static final Logger LOGGER = Logging.getLogger(ACLResourceAccessManager.class);

    private AclPropertyPlaceholderConfigurer configurer;

    private AccessManagerConfig accessManagerConfiguration = new AccessManagerConfig();

    private URI configLocation;

    private AuthorizationService service;

    public AclConfigurationManager(AuthorizationService service) {
        Objects.requireNonNull(service);
        this.service = service;
    }

    @Override
    public AccessManagerConfig get() {
        return getConfiguration();
    }

    public AccessManagerConfig getConfiguration() {
        return accessManagerConfiguration;
    }

    /** Updates the configuration. */
    public void setConfiguration(AccessManagerConfig configuration) throws Exception {
        this.accessManagerConfiguration = configuration;
        LOGGER.log(
                Level.INFO,
                "ACL AccessManager configuration: instance name is {0}",
                configuration.getInstanceName());
    }

    public void testConfig(AccessManagerConfig config) {
        throw new UnsupportedOperationException("implement");
        //		service.getMatchingRules(null)
        //		ruleReader.getMatchingRules(AccessRequest.builder().build());
    }

    public void storeConfiguration() throws IOException {
        Resource configurationFile = configurer.getConfigFile();

        try (BufferedWriter writer =
                new BufferedWriter(new OutputStreamWriter(configurationFile.out()))) {
            writer.write("### GeoServer ACL Module configuration file\n");
            writer.write("### \n");
            writer.write("### GeoServer will read this file at boot time.\n");
            writer.write(
                    "### This file may be automatically regenerated by GeoServer, so any changes beside the property values may be lost.\n\n");

            saveConfiguration(writer, accessManagerConfiguration);
        }
    }

    /** Saves current configuration to disk. */
    protected void saveConfiguration(Writer writer, AccessManagerConfig configuration)
            throws IOException {

        writer.write("### GeoSever ACL main configuration\n\n");

        saveConfig(writer, "instanceName", configuration.getInstanceName());
        saveConfig(
                writer, "allowRemoteAndInlineLayers", configuration.isAllowRemoteAndInlineLayers());
        saveConfig(
                writer,
                "grantWriteToWorkspacesToAuthenticatedUsers",
                configuration.isGrantWriteToWorkspacesToAuthenticatedUsers());
        saveConfig(writer, "useRolesToFilter", configuration.isUseRolesToFilter());
        saveConfig(writer, "acceptedRoles", configuration.getAcceptedRoles());
    }

    protected void saveConfig(Writer writer, String name, Object value) throws IOException {
        writer.write(name + "=" + String.valueOf(value) + "\n");
    }

    /** Returns a copy of the configuration. */
    public void setConfigurer(AclPropertyPlaceholderConfigurer configurer) {
        this.configurer = configurer;
    }

    public void setConfigLocation(URI configLocation) {
        this.configLocation = configLocation;
    }
}
